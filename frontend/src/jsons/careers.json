[
  {
    "duration": "2022.06 ~ 2023.06",
    "company": "팀솔루션",
    "position": "Frontend Developer",
    "introduce": "게임엔진인 Unity를 활용해서 산업현장을 3D 디지털 트윈으로 구현하여 기계 설비의 충전량, 온도 등 설비 데이터로 현장의 전반적인 상황을 시각적으로 표현하여 업무의 효율적인 처리와 사고의 방지를 돕는 소프트웨어를 만드는 기업입니다.",
    "task": "사용자가 Unity 화면에서 클릭한 설비의 id를 토대로 백엔드 API에서 데이터를 조회하여 화면단에 위젯으로 띄워주고 Unity에 데이터를 전달하여 위험, 정상 등의 상태를 표시하는 업무를 하였습니다.",
    "performances": [
      {
        "topic": "불필요한 단계를 걷어내어 코드의 양을 대폭 줄임",
        "descriptions": [
          "입사 전부터 우리 팀이 Unity를 띄우기 위해 진행해왔던 방식은 iframe태그를 사용하여 현재 페이지 내부에 새로운 페이지를 띄울 공간을 삽입한다음 그곳에 Unity를 띄움",
          "그런데 iframe을 사용하면 바깥쪽의 페이지와 통신을 하기 위해 postMessage라는 window 메소드를 이용해야함",
          "postMessage로 인해 코드의 양이 굉장히 늘어나서 코드 가독성이 좋지 않아졌음",
          "그렇게 시작하게 된 관련 PoC 프로젝트에서 iframe 없이도 Unity와 잘 소통할 수 있는 방식을 구현해냈고 이를 팀원들과 공유",
          "다른 고연차 팀원들이 전담하고 있는 항공 공기업의 수주를 받아 진행한 규모가 큰 SI 프로젝트에서는 족히 300~500줄은 들어냈을 것이라고 장담할 수 있을 정도로 우리 팀에 중요한 연구결과였음"
        ]
      },
      {
        "topic": "불필요한 네트워크 요청 절감 & 병목현상 해결",
        "descriptions": [
          "React-Query를 통해 CRUD 처리 후 Cache를 수정하는 방법에 문제가 있음을 파악",
          "기존에 사용되고 있던 invalidateQueries로 인해 해당 key와 관련된 API요청이 다시 보내져 불필요한 네트워크 요청이 과도하게 발생하고 있음을 인지",
          "또한 invalidateQueries가 수차례 발생하여 워터폴 현상으로 인해 데이터 병목현상이 일어남을 인지",
          "따라서 CRUD 처리 후 Cache를 수동으로 직접 수정하는 방법인 setQueryData로 변경하여 문제를 해결하고 이를 팀원에게 알려 invalidateQueries를 무분별하게 사용하지 말 것을 권함."
        ]
      }
    ]
  },
  {
    "duration": "2023.09 ~ ",
    "company": "아하앤컴퍼니",
    "position": "Frontend Developer",
    "introduce": "MAU 1000만, 월 트래픽 800만의 B2C 서비스인 '아하'를 운영하는 기업입니다.",
    "task": "",
    "performances": [
      {
        "topic": "",
        "descriptions": []
      }
    ]
  }
]
